<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- 启动注解 -->
<context:annotation-config/>
<!-- 自动扫描 -->
<!-- 启动组件扫描,排除@Controller组件,该组件由springMVC配置文件扫描 -->
<context:component-scan base-package="com.lnsf">
<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
<!-- 事务相关控制 -->
<bean id="transactionManager" name="transactionManager"
class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<property name="dataSource" ref="dataSource"></property>
</bean>
<!-- 引入配置文件 -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="location" value="classpath:jdbc.properties"></property>
</bean>

<!-- 配置DataSource数据源  -->
<!-- 阿里Druid 数据库连接池  -->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
 <!-- 数据库基本信息配置 -->
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <property name="driverClassName" value="${druid.driverClassName}"/>
        <property name="filters" value="${druid.filters}"/>

        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}"/>

        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>

        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>

        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
</bean>
		<!-- 事务 -->
 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
 		<tx:attributes>
 			<tx:method name="delete*" propagation="REQUIRED"
 			read-only="false" rollback-for="java.lang.Exception"
 			/>
 			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
 		</tx:attributes>
 	</tx:advice>
 	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- 事务处理 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.lnsf.service..*.*(..) )" id="pointcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
	<!-- spring与mybatis整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<!--<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>-->
     <!-- 映射日志文件.xml文件 -->
    <property name="configLocation" value="classpath:mybatis_log.xml"></property>
     <!-- 自动扫描mapping.xml文件  -->
     <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
     <property name="typeAliasesPackage" value="com.lnsf.entities"></property>   
	<!-- 分页 -->
	<property name="plugins">
		<array>
			<bean class="com.github.pagehelper.PageInterceptor">
			<!-- 分页配置 -->
			<property name="properties">
				<value>
				helperDialect=mysql
				 <!--当reasonable设置为 true 时，
				 pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），
				 会查询最后一页-->
				 reasonable=true
				 <!--支持通过Mapper 接口参数来传递分页参数  -->
				 supportMethodsArguments=true
				 <!-- params=count=countSql  -->
				   <!--允许在运行时根据多数据源自动识别对应方言的分页-->
                  autoRuntimeDialect=true
				</value>
			</property>
			</bean>
		</array>
	</property>
	</bean>
	<!-- 通过扫描的模式，扫描mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lnsf.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!-- 创建一个sqlSession的实例，线程安全，可以在所有Dao实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	  
	<!-- ================ Shiro start 略 ================ -->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
        <!--<property name="realm" ref="ShiroRealm"/>-->
    <!--</bean>-->

    <!-- 項目自定义的Realm -->
    <!--<bean id="ShiroRealm" class="com.demo.oldmountain.interceptor.shiro.ShiroRealm"></bean>-->

    <!-- Shiro Filter -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
        <!--<property name="securityManager" ref="securityManager"/>-->

        <!--<property name="loginUrl" value="/"/>-->

        <!--<property name="successUrl" value="/toIndex"/>-->

        <!--<property name="unauthorizedUrl" value="/login"/>-->

        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/system/** = anon-->
                <!--/static/** = anon-->
                <!--/picture/* = anon-->
                <!--/uploadFiles/* = anon-->
            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->
    <!-- ================ Shiro end ================ -->
    <!--验证码配置，比如登录时会要求输入4位随机验证码，下面配置是生成验证码图片,本教程不涉及，可不配置-->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!--Border around kaptcha. Legal values are yes or no. -->
                        <prop key="kaptcha.border">no</prop>
                        <!--Color of the border. Legal values are r,g,b (and optional alpha) or white,black,blue. -->
                        <prop key="kaptcha.border.color">green</prop>
                        <!--Thickness of the border around kaptcha. Legal values are > 0. -->
                        <prop key="kaptcha.border.thickness">1</prop>
                        <!--Width in pixels of the kaptcha image. -->
                        <prop key="kaptcha.image.width">100</prop>
                        <!--Height in pixels of the kaptcha image. -->
                        <prop key="kaptcha.image.height">45</prop>
                        <!--The image producer. -->
                        <prop key="kaptcha.producer.impl">com.google.code.kaptcha.impl.DefaultKaptcha</prop>
                        <!--The text producer. -->
                        <prop key="kaptcha.textproducer.impl">com.google.code.kaptcha.text.impl.DefaultTextCreator
                        </prop>
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
                        <!--The background implementation. -->
                        <prop key="kaptcha.background.impl">com.google.code.kaptcha.impl.DefaultBackground</prop>
                        <!--The word renderer implementation. -->
                        <prop key="kaptcha.word.impl">com.google.code.kaptcha.text.impl.DefaultWordRenderer</prop>
                        <!--The value for the kaptcha is generated and is put into the HttpSession. This is the key value for that item in the session. -->
                        <prop key="kaptcha.session.key">KAPTCHA_SESSION_KEY</prop>
                        <!--The date the kaptcha is generated is put into the HttpSession. This is the key value for that item in the session. -->
                        <prop key="kaptcha.session.date">KAPTCHA_SESSION_DATE</prop>
                        <!-- 验证码背景颜色渐变，开始颜色 -->
                        <prop key="kaptcha.background.clear.from">248,248,248</prop>
                        <!-- 验证码背景颜色渐变，结束颜色 -->
                        <prop key="kaptcha.background.clear.to">248,248,248</prop>
                        <!-- 验证码的字符 -->
                        <prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>
                        <!-- 验证码字体颜色 -->
                        <prop key="kaptcha.textproducer.font.color">0,0,255</prop>
                        <!-- 验证码的效果，水纹 -->
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
                        <!-- 验证码字体大小 -->
                        <prop key="kaptcha.textproducer.font.size">35</prop>
                        <!-- 验证码字数 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <!-- 验证码文字间距 -->
                        <prop key="kaptcha.textproducer.char.space">2</prop>
                        <!-- 验证码字体 -->
                        <prop key="kaptcha.textproducer.font.names">new Font("Arial", 1, fontSize), new Font("Courier",
                            1, fontSize)
                        </prop>
                        <!-- 不加噪声 -->
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.DefaultNoise</prop>
                        <!--The noise color. Legal values are r,g,b. -->
                        <prop key="kaptcha.noise.color">black</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>


